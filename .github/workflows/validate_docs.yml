name: Validate Documentation

on:
  push:
    branches: [main, develop]
    paths:
      - "**.md"
      - "tools/**"
      - "scripts/*.sh"
      - ".github/workflows/validate_docs.yml"
      - ".markdownlint.json"
  pull_request:
    branches: [main]
    paths:
      - "**.md"
      - "tools/**"
      - "scripts/*.sh"
      - ".github/workflows/validate_docs.yml"

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install markdownlint
        run: npm install -g markdownlint-cli2

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Run validation suite
        run: |
          echo "Running comprehensive validation suite..."
          ./scripts/run_validation_suite.sh --detailed --strict || exit 1

      - name: Validate Markdown formatting
        continue-on-error: true
        run: |
          echo "Validating Markdown files..."
          markdownlint-cli2 "**/*.md" "#archive" "#node_modules" || echo "⚠️  Markdown formatting warnings found"

      - name: Check for broken internal links
        run: |
          echo "Checking for broken internal links..."

          python3 -c '
          import re
          import sys
          import glob
          from pathlib import Path

          broken_links = []

          # Files to skip
          skip_dirs = ["node_modules", "archive", ".git"]

          for md_file in glob.glob("**/*.md", recursive=True):
              # Skip archived and dependency directories
              if any(skip_dir in md_file for skip_dir in skip_dirs):
                  continue

              md_path = Path(md_file)
              with open(md_path, "r", encoding="utf-8") as f:
                  content = f.read()

              # Remove code blocks to avoid false positives
              content = re.sub(r"```[\s\S]*?```", "", content, flags=re.MULTILINE)
              content = re.sub(r"^[ ]{4,}.*$", "", content, flags=re.MULTILINE)

              # Find markdown links [text](link)
              links = re.findall(r"(?<!\!)\[([^\]]+)\]\(([^)]+)\)", content)

              for text, link in links:
                  # Skip external links and anchors
                  if link.startswith(("http://", "https://", "#", "mailto:", "tel:")):
                      continue

                  # Skip shell variables and code examples
                  if any(c in link for c in ["$", "{", "}", "*", "|"]):
                      continue

                  # Clean up the link path
                  link_path = link.split("#")[0]
                  if not link_path:
                      continue

                  # Resolve path
                  if link_path.startswith("./"):
                      check_path = md_path.parent / link_path[2:]
                  elif link_path.startswith("../"):
                      check_path = md_path.parent / link_path
                  else:
                      check_path = md_path.parent / link_path

                  try:
                      check_path = check_path.resolve()
                      if not check_path.exists():
                          if any(ext in link for ext in [".md", ".txt", ".sh", ".json"]):
                              broken_links.append(f"{md_file}: [{text}]({link})")
                  except Exception:
                      pass

          if broken_links:
              print("❌ Found broken internal links:")
              for link in broken_links:
                  print(f"   {link}")
              sys.exit(1)
          else:
              print("✅ No broken internal links found")
          '

      - name: Verify tool counts are consistent
        run: |
          echo "Verifying tool counts across documentation..."

          # Count tools in tools/ directory
          TOOLS_COUNT=$(grep -h "^### \*\*" tools/*.md | wc -l | tr -d ' ')

          # Count categories
          CATEGORY_COUNT=$(ls tools/*.md | grep -v README | wc -l | tr -d ' ')

          # Check README badge
          README_TOOLS=$(grep -oE 'Tools-[0-9]+' README.md | head -1 | grep -oE '[0-9]+' || echo "0")
          README_CATS=$(grep -oE 'Categories-[0-9]+' README.md | head -1 | grep -oE '[0-9]+' || echo "0")

          echo "Tools count: $TOOLS_COUNT"
          echo "Categories count: $CATEGORY_COUNT"
          echo "README tools badge: $README_TOOLS"
          echo "README categories badge: $README_CATS"

          if [ "$TOOLS_COUNT" != "$README_TOOLS" ]; then
            echo "❌ Tool count mismatch! tools/: $TOOLS_COUNT, README: $README_TOOLS"
            echo "Run: ./scripts/update_stats.sh --fix"
            exit 1
          fi

          if [ "$CATEGORY_COUNT" != "$README_CATS" ]; then
            echo "❌ Category count mismatch! tools/: $CATEGORY_COUNT, README: $README_CATS"
            echo "Run: ./scripts/update_stats.sh --fix"
            exit 1
          fi

          echo "✅ Tool counts are consistent"

      - name: Verify required files exist
        run: |
          echo "Checking required files..."

          REQUIRED_FILES=(
            "README.md"
            "CLAUDE.md"
            "MASTER_PLAN.md"
            "archive/TOOLS.md"
            "docs/DOCUMENTATION.md"
            "docs/CHEATSHEET.md"
            "docs/templates/simple_query.md"
            "docs/templates/complex_pipeline.md"
            "docs/snippets/lookup_patterns.md"
            "docs/snippets/debugging_checklist.md"
            "docs/safety/comprehensive_safety_guide.md"
            "scripts/update_stats.sh"
            "scripts/run_validation_suite.sh"
            ".markdownlint.json"
          )

          MISSING=0
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file"
            else
              echo "❌ Missing: $file"
              MISSING=$((MISSING + 1))
            fi
          done

          if [ $MISSING -gt 0 ]; then
            echo ""
            echo "❌ $MISSING required file(s) missing"
            exit 1
          fi

          echo ""
          echo "✅ All required files present"

      - name: Summary
        if: always()
        run: |
          echo ""
          echo "======================================="
          echo "  Documentation Validation Complete"
          echo "======================================="
          echo ""
          echo "Checks performed:"
          echo "  ✓ Comprehensive validation suite"
          echo "  ✓ Markdown formatting"
          echo "  ✓ Internal link validation"
          echo "  ✓ Tool count consistency"
          echo "  ✓ Required files check"
          echo ""
